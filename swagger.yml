openapi: 3.0.0
info:
  title: Final Project Documentation 
  description: >-
    This is the documentation for the final project.
    Here you can try almost all the endpoints (the chat canÂ´t be tried here).


    Before trying any route, you need to login (with the exampleData) or register (if you register a new user, it WON'T BE TYPE ADMIN).
    Then you can take the JWT ,that you receive from the endpoints, and put it in the authorize button.
  version: 1.0.0
servers:
  - url: http://localhost:8088
  - url: https://railway-production-ebe6.up.railway.app
components:
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        price: 
          type: integer
          format: int64
        thumbnail:
          type: string
        category: 
          type: string
        stock: 
          type: integer
          format: int64
    Cart: 
      type: object
      properties:
        id: 
          type: string
        userId:
          type: string
        cart:
          type: array
          items:
            type: object
            properties: 
              id:
                type: string
              productId:
                type: string
              amount:
                type:  integer
                format: int64
    User:
      type: object
      properties:
        id: 
          type: string
        username:
          type: string
        gmail: 
          type: string
        password:
          type: string
        phoneNumber: 
          type: string
        image:
          type: string
        admin:
          type: boolean
        address:
          type: string
    Order: 
      type: object
      properties: 
        id:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              price:
                type: integer
                format: int64
              amount:
                type: integer
                format: int64
        userId:
          type: string
        numberOrder:
          type: integer
          format: int64
        state: 
          type: string
        gmail:
          type: string
        total:
          type: integer
          format: int64
security:
  - bearerAuth: []  
    description: >-
      ### **Users login and register .**


      -  Entering the user's information into the database and creating the corresponding cart.

      - Login of the user already registered.

      - Logout of the user.
  - name: Products
    description: >-
      ### **Products handling routes.**


      - Obtain all the products or one given by the ID.

      - Modification of products by admin users.

      - Deleting of products by admin users.

      - Creation of products by admin users.
      
      - Obtain the products given by their category.

  - name: Cart
    description: >-
      ### **Cart handling Route.**


      - Add products to the user's cart.

      - Obtain the cart. (With products or empty).

      - Modification of the amount of a product inside the user's cart or simply deleting it.

      - Generate an order based on the actual cart.
  - name: Orders
    description: >-
      ### **Orders handling Route.**


      - Obtain all the orders of the user, generated, paid, canceled or ended.

      - Obtain an order by its ID.
      
      - Finish an order.
  - name: Chat
    description: >-
      ### Route that simply show the chat made with handlebars.


      This route can't be tried in swagger because it uses websocket. 
      Try it in production in this endpoint:.
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register
      description: >-
        Route of register.
        This Route create the user in the DB, JWT, session and cart.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:              
                gmail: test@gmail.com
                password: password
                passwordConfirm: password
                age: 35
                username: TestUser
                phoneNumber: 99999999
                image: RandomImage
                adress: av.Rivadavia
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                token: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NDI2NDE1YzVhNGUyZWY4MTMxYWE0NmQiLCJ1c2VybmFtZSI6IlRlc3QiLCJpbWFnZSI6IlJhbmRvbUltYWdlIiwiZ21haWwiOiJtYXJpYW5vLnBhcG9yZWxsb0BnbWFpbC5jb20iLCJpYXQiOjE2ODAyMjg3MDAsImV4cCI6MTY4MDIzMjMwMH0.OEHFqdMLiJHWIMi4CElgIJnB9nhIjCeyZ34fWTy5768
        '400':
          description: Bad Request
          
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 400 datos-mal-ingresados
                  value:
                    Error: Datos ingresados no validos o nulos
                example-1:
                  summary: 400 paswords-diferentes
                  value:
                    Error: The passwords entered are not the same.
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      description: >-
        Route of login check if the user exist and return the JWT and session if it's exist.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: TestUser
                password: password
                passwordConfirm: password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                token: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NDI2NDE1YzVhNGUyZWY4MTMxYWE0NmQiLCJ1c2VybmFtZSI6IlRlc3QiLCJpbWFnZSI6IlJhbmRvbUltYWdlIiwiZ21haWwiOiJtYXJpYW5vLnBhcG9yZWxsb0BnbWFpbC5jb20iLCJpYXQiOjE2ODAyMjg3MDAsImV4cCI6MTY4MDIzMjMwMH0.OEHFqdMLiJHWIMi4CElgIJnB9nhIjCeyZ34fWTy5768
        '400':
          description: Bad Request
               
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 400 datos-mal-ingresados
                  value:
                    Error: Data entered invalid or null.
  /auth/logout:
    get:
      tags:
        - Auth
      summary: Logout
      security:
        - bearerAuth: []  
      description: Logout route.
      responses:
        '200':
          description: OK
               
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: '200'
                  value:
                    logoutFromThisUser: Test
                example-1:
                  summary: 400 not-data-of-user
                  value:
                    err: No data of the user.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                Error: Not Logged
        '403':
          description: Forbidden
               
          content:
            application/json:
              schema:
                type: object
              example:
                Error: Not authorized
  /products/{id}:
    get:
      tags:
        - Products
      summary: getProducts{Id?}
      
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: false
          description: Id of the product you want to see.
      description: >-
        Route that could bring all the products from the DB or the one you want by his ID.
      
      responses:
        '200':
          description: OK
          
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: '200'
                  value:
                    productos:
                      - _id: 639879b18557f55e96e749d7
                        title: Mochila
                        price: 800
                        thumbnail: >-
                          https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTPTV7LVsKrZowJoTIn5SadPs_qQ1YjtHykgYChLb1GZ4C8TpU94pQ13gQuwNZz6v399iA&usqp=CAU
                        createdAt: '2022-12-13T13:10:09.386Z'
                        updatedAt: '2022-12-13T13:10:09.386Z'
                        __v: 0
                        category: school
                        stock: 4
                example-1:
                  summary: 200 :id
                  value:
                    productoBuscado:
                      _id: 639879b18557f55e96e749d7
                      title: Mochila
                      price: 800
                      thumbnail: >-
                        https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTPTV7LVsKrZowJoTIn5SadPs_qQ1YjtHykgYChLb1GZ4C8TpU94pQ13gQuwNZz6v399iA&usqp=CAU
                      createdAt: '2022-12-13T13:10:09.386Z'
                      updatedAt: '2022-12-13T13:10:09.386Z'
                      __v: 0
                      category: school
                      stock: 4
        '400':
          description: Bad Request
          
          content:
            application/json:
              schema:
                type: object
              example:
                Error: The ID received is incorrect (it needs to have 24 characters) or doesn't exist.
    put:
      tags:
        - Products
      summary: modifyProductAdminNeeded
      security:
        - bearerAuth: []  
      description: >-
        Route that modify a product only if the user is an admin.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: bolsa de Cemento
                price: 300
                thumbnail: 'null'
                stock: 200
                category: albaÃ±ileria
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: Id of the product you want to see.
        
            
      responses:
        '200':
          description: OK
               
          content:
            application/json:
              schema:
                type: object
              example:
                msg: Modification  done to product with ID 6412321bcv1233
        '400':
          description: Bad Request
          
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: '400'
                  value:
                    Error: Session destroyed
                example-1:
                  summary: 400 modificacion-fallÃ³
                  value:
                    Error: Modification failed
        '401':
          description: Unauthorized
               
          content:
            application/json:
              schema:
                type: object
              example:
                Error: Not Logged
        '403':
          description: Forbidden
               
          content:
            application/json:
              schema:
                type: object
              example:
                Error: Expired token
    delete:
      tags:
        - Products
      summary: DeleteProduct
      security:
        - bearerAuth: []  
      description: >-
        Route that delete a product by its ID if the user is ADMIN.
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: false
          description: Id of the product you want to see.
        
            .P3eOs2aJAHShyvWnzhtpJZT-dOKcxU1yzUZpLe87-8k
      responses:
        '200':
          description: OK  
          content:
            application/json:
              schema:
                type: object
              example:
                msg: 'Product with id: 642659bcbd5567998e198c0f. Was deleted'
        '400':
          description: Bad Request
               
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 400 id-mal-ingresado
                  value:
                    error: >-
                      Error when trying to delete the product with ID: 12334124213. Because the id hasn't got 24 caracters
                example-1:
                  summary: 400 producto ya borrado
                  value:
                    error: >-
                      Error when trying to delete the product with id:
                      642659bcbd5567998e198c0f. It doesn't exist.
        '401':
          description: Unauthorized
               
          content:
            application/json:
              schema:
                type: object
              example:
                Error: Not Logged
        '403':
          description: Forbidden
               
          content:
            application/json:
              schema:
                type: object
              example:
                Error: Expired token
  /products/: 
    post:
      tags:
        - Products
      security:
        - bearerAuth: []
      summary: newProductAdmin
      description: >-
        Route that create an new product only if the user is ADMIN.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Producto
                price: 300
                thumbnail: 'null'
                stock: 200
                category: nothing
      responses:
        '200':
          description: OK
               
          content:
            application/json:
              schema:
                type: object
              example:
                productoCreado:
                  title: Producto
                  price: 300
                  thumbnail: 'null'
                  stock: 200
                  category: nothing
                  _id: 6426484f06bc076be88f1cc7
                  createdAt: '2023-03-31T02:41:19.024Z'
                  updatedAt: '2023-03-31T02:41:19.024Z'
                  __v: 0
        '400':
          description: Bad Request
          
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 400 usuario-no-ingresÃ³
                  value:
                    Error: Not Logged
                example-1:
                  summary: 400 session-destroyed
                  value:
                    Error: Session destroyed
        '403':
          description: Forbidden
               
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 403 no-autorizado
                  value:
                    Error: Not authorized
                example-1:
                  summary: 403 Expired token
                  value:
                    Error: Expired token
  /products/category/{category}:
    get:
      tags:
        - Products
      summary: getProductByCategory
      parameters:
        - name: category
          in: path
          schema:
            type: string
          required: true
          example: school
          description: Category of the product that want to be seen.
      description: Route that brings a list of products given by their category.
      responses:
        '200':
          description: OK
               
          content:
            application/json:
              schema:
                type: object
              example:
                productosBuscados:
                  - _id: 639879b18557f55e96e749d7
                    title: Mochila
                    price: 800
                    thumbnail: >-
                      https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTPTV7LVsKrZowJoTIn5SadPs_qQ1YjtHykgYChLb1GZ4C8TpU94pQ13gQuwNZz6v399iA&usqp=CAU
                    createdAt: '2022-12-13T13:10:09.386Z'
                    updatedAt: '2022-12-13T13:10:09.386Z'
                    __v: 0
                    category: school
                    stock: 4
        '400':
          description: Bad Request
               
          content:
            application/json:
              schema:
                type: object
              example:
                Error: It couldn't ve found any product with that category.
    
  /cart/add/{id}:
    post:
      tags:
        - Cart
      summary: ProductToCart
      security:
        - bearerAuth: []  
      description: >-
        It's add a product to the user's cart given its ID.
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: Id of the product that want to be added.
      responses:
        '200':
          description: OK
               
          content:
            application/json:
              schema:
                type: object
              example:
                msg: 'Product added successfully'
        '400':
          description: Bad Request
               
          content:
            application/json:
              schema:
                type: object
              example:
                Error: Id E
        '401':
          description: Unauthorized
               
          content:
            application/json:
              schema:
                type: object
              example:
                Error: Not Logged
        '403':
          description: Forbidden
               
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 403 notAutorized
                  value:
                    Error: No estas autorizado
                example-1:
                  summary: 403  Expired token
                  value:
                    Error: Expired token
  /cart/:
    get:
      tags:
        - Cart
      security:
        - bearerAuth: []  
      summary: SeeCartOfUser
      description: >-
        It brings the product from the user's cart. If there aren't it will return null
      responses:
        '200':
          description: OK
               
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: '200'
                  value:
                    productsInCart:
                      - title: Mochila
                        price: 800
                        thumbnail: >-
                          https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTPTV7LVsKrZowJoTIn5SadPs_qQ1YjtHykgYChLb1GZ4C8TpU94pQ13gQuwNZz6v399iA&usqp=CAU
                        amount: 1
                example-1:
                  summary: 200 CART EMPTY
                  value:
                    productsInCart: []
        '400':
          description: Bad Request
          
          content:
            application/json:
              schema:
                type: object
              example:
                Error: Not Logged
        '403':
          description: Forbidden
          
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 403 tokenVencido
                  value:
                    Error: Expired token
                example-1:
                  summary: 403 notautorized
                  value:
                    Error: Not authorized
  /cart/delete:
    delete:
      tags:
        - Cart
      summary: DeleteProductsInCart
      security:
        - bearerAuth: []  
      description: >-
        It recives an id of a product and a amount of how much you want to delete from that product.
        This deletes the product or modify it depending the amount of that product in the cart and the amount you want to delete.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: Id
                cuantity: 1
      
       
      responses:
        '200':
          description: OK
               
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 200 Delete product
                  value:
                    msg: Product in cart was deleted succesfully.
                example-1:
                  summary: 200 Modify amount of product
                  value:
                    msg: Product in cart updated succesfully.
        '400':
          description: Bad Request
               
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 400 productNotFound
                  value:
                    Error: Product not found in the cart.
                example-1:
                  summary: 400 datos faltantes
                  value:
                    Error: Amount or id were entered wrong.
        '401':
          description: Unauthorized
               
          content:
            application/json:
              schema:
                type: object
              example:
                Error: Not Logged
        '403':
          description: Forbidden
               
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 403 Expired token
                  value:
                    Error: Expired token
                example-1:
                  summary: 403 not autorized
                  value:
                    Error: Not authorized
  /cart/submit:
    post:
      tags:
        - Cart
      summary: createOrder
      security:
        - bearerAuth: []  
      description: >-
        Generate an order based in the cart. 
      requestBody:
        content: {}
      
      responses:
        '201':
          description: Created
               
          content:
            application/json:
              schema:
                type: object
              example:
                order:
                  items:
                    - amount: 1
                      price: 800
                      _id: 64266ad09207e8f5dbae00dd
                  userId: 6420cad5003b03e6805fd1b9
                  numberOrder: 3
                  state: Generado
                  gmail: user2@gmail.com
                  total: 800
                  _id: 64266ad09207e8f5dbae00dc
                  createdAt: '2023-03-31T05:08:32.100Z'
                  updatedAt: '2023-03-31T05:08:32.100Z'
                  __v: 0
        '401':
          description: Unauthorized
               
          content:
            application/json:
              schema:
                type: object
              example:
                Error: Not Logged
        '403':
          description: Forbidden
               
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 403 Expired token
                  value:
                    Error: Expired token
                example-1:
                  summary: 403 notAutorized
                  value:
                    Error: Not authorized
  /orders/{id}:
    get:
      tags:
        - Orders
      summary: getOrderByOrderId
      security:
        - bearerAuth: []  
      description: >-
        Obtain the orders of the user or  if there is an ID the one that matches.
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: false
          description: Id of the order that you want to see.
      responses:
        '200':
          description: OK
               
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: '200'
                  value:
                    OrdenBuscada:
                      _id: 64265d9067162686abd72bad
                      items:
                        - amount: 3
                          price: 2400
                          _id: 64265d9067162686abd72bae
                      userId: 6420cad5003b03e6805fd1b9
                      numberOrder: 2
                      state: Generado
                      gmail: user2@gmail.com
                      total: 2400
                      createdAt: '2023-03-31T04:12:00.327Z'
                      updatedAt: '2023-03-31T04:12:00.327Z'
                      __v: 0
                example-1:
                  summary: 400 no id
                  value:
                    OrdenBuscada: null
        '400':
          description: Bad Request
               
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 400 wrongId
                  value:
                    Error: >-
                      Id entered is invalid because its has less than 24 characters.
                example-1:
                  summary: 400 id de orden no existe
                  value:
                    Error: Id of the order wanted don't exist.
        '401':
          description: Unauthorized
               
          content:
            application/json:
              schema:
                type: object
              example:
                Error: Not Logged
        '403':
          description: Forbidden
               
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 403 Expired token
                  value:
                    Error: Expired token
                example-1:
                  summary: 403 no autorizado
                  value:
                    Error: Not authorized
  /orders/complete:
    post:
      tags:
        - Orders
      summary: CompleteTheOrder
      security:
        - bearerAuth: []  
      description: >-
        Modify the state of the order ,that we get with the ID, to ended/complete and it sends to the gmail of the user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: 642209c501f354d5ac3c09f0
      responses:
        '200':
          description: OK
               
          content:
            application/json:
              schema:
                type: object
              example:
                msg: Order completed and sent.
        '400':
          description: Bad Request
               
          content:
            application/json:
              schema:
                type: object
              example:
                Error: Orden no encontrada o en estado no generado
        '401':
          description: Unauthorized
               
          content:
            application/json:
              schema:
                type: object
              example:
                Error: Not Logged
        '403':
          description: Forbidden
               
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 403 tokenVencido
                  value:
                    Error: Expired token
                example-1:
                  summary: 403 notAutorized
                  value:
                    Error: No estas autorizado
  /chat/:
    get:
      tags:
        - Chat
      summary: chat
      description: Brings the HTML of this endpoint.
      responses:
        '200':
          description: OK
          
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
          content:
            text/plain:
              schema:
                type: string
  /profile/:
    get:
      tags:
        - Profile
      summary: Profile
      security:
        - bearerAuth: []  
      description: Route that shows the data of the user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  _id: 640a41bdb7c9c4215357c7e9
                  gmail: user@gmail.com
                  password: $2b$10$37TA9iWrGVmZYv3aTm8cUuyZgeLbUPBBi27BDditPDN6ErFHw5wjy
                  age: '10'
                  username: Test
                  phoneNumber: '99999999'
                  image: RandomImage
                  __v: 0
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              example:
                Error: Not Logged
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: '403'
                  value:
                    Error: Not authorized
                example-1:
                  summary: 403 Expired token
                  value:
                    Error: Expired token

  /:
    get:
      tags:
        - Documentation
      summary: Home
      description: >-
        Route that show the Documentation of the proyect.
      responses:
        '200':
          description: OK
               type: string
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 200 user-logged
                  value:
                    data:
                      _id: 6420cad5003b03e6805fd1b9
                      gmail: user2@gmail.com
                      password: >-
                        $2b$10$c18Q7NETSCxdqc8XsYugw.ctD5jxY6Ev7hDK/twpJ48F8j6b48VwK
                      age: '10'
                      username: Test2
                      phoneNumber: '99999999'
                      image: RandomImage
                      admin: true
                      __v: 0
                    productosDisponibles:
                      - _id: 639879b18557f55e96e749d7
                        title: Mochila
                        price: 800
                        thumbnail: >-
                          https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTPTV7LVsKrZowJoTIn5SadPs_qQ1YjtHykgYChLb1GZ4C8TpU94pQ13gQuwNZz6v399iA&usqp=CAU
                        createdAt: '2022-12-13T13:10:09.386Z'
                        updatedAt: '2022-12-13T13:10:09.386Z'
                        __v: 0
                        category: school
                        stock: 4
                      - _id: 63ddae228da2e37041195d4a
                        title: Remera de Boca
                        price: 2000
                        thumbnail: ImagenRandom
                        category: sport
                        stock: 7
                      - _id: 6426484f06bc076be88f1cc7
                        title: Producto
                        price: 300
                        thumbnail: 'null'
                        stock: 200
                        category: nothing
                        createdAt: '2023-03-31T02:41:19.024Z'
                        updatedAt: '2023-03-31T02:41:19.024Z'
                        __v: 0
                example-1:
                  summary: 200 user-not-logged
                  value:
                    productosDisponibles:
                      - _id: 639879b18557f55e96e749d7
                        title: Mochila
                        price: 800
                        thumbnail: >-
                          https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTPTV7LVsKrZowJoTIn5SadPs_qQ1YjtHykgYChLb1GZ4C8TpU94pQ13gQuwNZz6v399iA&usqp=CAU
                        createdAt: '2022-12-13T13:10:09.386Z'
                        updatedAt: '2022-12-13T13:10:09.386Z'
                        __v: 0
                        category: school
                        stock: 4
                      - _id: 63ddae228da2e37041195d4a
                        title: Remera de Boca
                        price: 2000
                        thumbnail: ImagenRandom
                        category: sport
                        stock: 7
                      - _id: 6426484f06bc076be88f1cc7
                        title: Producto
                        price: 300
                        thumbnail: 'null'
                        stock: 200
                        category: nothing
                        createdAt: '2023-03-31T02:41:19.024Z'
                        updatedAt: '2023-03-31T02:41:19.024Z'
                        __v: 0
 



